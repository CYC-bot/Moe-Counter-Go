name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配语义化版本标签 (v1.0.0格式)

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          # 排除不常见的组合
          - os: windows-latest
            arch: arm64
          - os: macos-latest
            arch: amd64
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        # 转换OS标识符为Go兼容格式
        case "${{ runner.os }}" in
          "Linux")
            GO_OS="linux"
            OS_NAME="linux"
            ;;
          "macOS")
            GO_OS="darwin"
            OS_NAME="macos"
            ;;
          "Windows")
            GO_OS="windows"
            OS_NAME="windows"
            ;;
          *)
            GO_OS="linux"
            OS_NAME="linux"
            ;;
        esac
        
        # 设置输出文件名
        OUTPUT="moeCounter-${{ runner.os }}-${{ matrix.arch }}"
        if [ "${{ runner.os }}" == "Windows" ]; then
          OUTPUT="$OUTPUT.exe"
        fi
        
        # 构建二进制
        GOOS=$GO_OS GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        
        # 创建平台专用目录
        mkdir -p release/$OS_NAME-${{ matrix.arch }}
        mv $OUTPUT release/$OS_NAME-${{ matrix.arch }}/
      # 添加错误继续选项
      continue-on-error: true

    - name: Package Artifact
      run: |
        # 设置平台目录名
        case "${{ runner.os }}" in
          "Linux")
            OS_NAME="linux"
            ;;
          "macOS")
            OS_NAME="macos"
            ;;
          "Windows")
            OS_NAME="windows"
            ;;
          *)
            OS_NAME="linux"
            ;;
        esac
        
        # 压缩平台专用目录
        cd release/$OS_NAME-${{ matrix.arch }}
        zip -r ../../$OS_NAME-${{ matrix.arch }}.zip .
        cd ../..
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-${{ matrix.arch }}
        path: ${{ runner.os }}-${{ matrix.arch }}.zip
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Check Release Existence
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.ref }}'.replace('refs/tags/', '')
            });
            return true;
          } catch (error) {
            return false;
          }
        result-encoding: json

    - name: Create Release
      id: create_release
      if: ${{ steps.check_release.outputs.result == false }}
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
      continue-on-error: true
      timeout-minutes: 5

    - name: Get Existing Release
      id: get_release
      if: ${{ steps.check_release.outputs.result == true }}
      uses: actions/github-script@v6
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: '${{ github.ref }}'.replace('refs/tags/', '')
          });
          return release.data.upload_url;
        result-encoding: string

    - name: Set Upload URL
      if: ${{ steps.check_release.outputs.result == true }}
      run: |
        echo "UPLOAD_URL=${{ steps.get_release.outputs.result }}" >> $GITHUB_ENV
      shell: bash

    - name: Upload Release Assets
      run: |
        # 设置上传URL
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url || env.UPLOAD_URL }}"
        
        # 遍历所有artifact并上传
        for asset in artifacts/*.zip; do
          asset_name=$(basename "$asset")
          echo "Uploading $asset_name..."
          
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"$asset" \
            "$UPLOAD_URL?name=$asset_name"
        done
      continue-on-error: true
      timeout-minutes: 10
