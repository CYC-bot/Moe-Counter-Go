name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-linux-${{ matrix.arch }}"
        GOOS=linux GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT linux-${{ matrix.arch }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}
        path: linux-${{ matrix.arch }}
        if-no-files-found: warn

  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-macos-${{ matrix.arch }}"
        GOOS=darwin GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT macos-${{ matrix.arch }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: macos-${{ matrix.arch }}
        if-no-files-found: warn

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        $output = "windows-${{ matrix.arch }}.exe"
        go build -o $output ./main.go
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: windows-${{ matrix.arch }}.exe
        if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*'

    - name: Compress binaries
      run: |
        if [ -d "artifacts" ]; then
          cd artifacts
          for file in *; do
            zip "${file}.zip" "$file"
          done
          cd ..
        else
          echo "Warning: artifacts directory not found. Skipping compression."
        fi
      shell: bash
      continue-on-error: true

    - name: Get Release Info
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: '${{ github.ref_name }}'
          });
          return {
            id: release.data.id,
            upload_url: release.data.upload_url.replace(/\{.*$/, '')
          };
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Assets
      run: |
        for file in artifacts/*.zip; do
          [ -e "$file" ] || continue
          filename=$(basename $file)
          echo "Uploading $filename to release ${{ steps.get_release.outputs.result.id }}"
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"$file" \
            "${{ steps.get_release.outputs.result.upload_url }}?name=$filename"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
