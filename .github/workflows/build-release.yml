name: Build and Release

# 触发条件：
#   - 手动触发：在GitHub仓库的Actions标签页中手动运行工作流
#   - 自动触发：当推送符合v*.*.*格式的标签时自动运行
#   示例标签：v1.0.0, v2.3.5, v3.0.0-rc.1
on:
  workflow_dispatch:  # 支持手动执行（无需参数）
  push:
    tags:             # 自动执行
      - 'v*.*.*'     # 匹配语义化版本标签（主.次.补丁）

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: 386
          - arch: amd64
          - arch: arm
            goarm: 6
          - arch: arm
            goarm: 7
          - arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-linux-${{ matrix.arch }}"
        # 为 ARMv6/v7 设置 GOARM
        if [ "${{ matrix.arch }}" == "arm" ]; then
          export GOARM=${{ matrix.goarm }}
          # 设置后缀
          SUFFIX="-v${{ matrix.goarm }}"
        else
          SUFFIX=""
        fi
        
        GOOS=linux GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT "linux-${{ matrix.arch }}$SUFFIX"
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}
        path: linux-${{ matrix.arch }}
        if-no-files-found: warn

  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-macos-${{ matrix.arch }}"
        GOOS=darwin GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT macos-${{ matrix.arch }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: macos-${{ matrix.arch }}
        if-no-files-found: warn

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        $output = "windows-${{ matrix.arch }}.exe"
        $env:GOOS = "windows"
        $env:GOARCH = "${{ matrix.arch }}"
        go build -o $output ./main.go
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: windows-${{ matrix.arch }}.exe
        if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    steps:
    - name: Check artifacts existence
      id: check_artifacts
      run: |
        # 检查所有需要的artifact是否都存在
        # 列出所有预期的 artifact
        required_artifacts=(
          "linux-386"
          "linux-amd64"
          "linux-arm"
          "linux-arm64"
          "macos-amd64"
          "macos-arm64"
          "windows-amd64"
          "windows-arm64"
        )
        missing_artifacts=()
        
        for artifact in "${required_artifacts[@]}"; do
          if [ ! -d "artifacts/$artifact" ]; then
            missing_artifacts+=("$artifact")
          fi
        done
        
        if [ ${#missing_artifacts[@]} -gt 0 ]; then
          echo "Missing artifacts: ${missing_artifacts[*]}"
          echo "skip_upload=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "skip_upload=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
      continue-on-error: true
      
    - name: Download all artifacts
      if: steps.check_artifacts.outputs.skip_upload == 'false'
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*'

    - name: Compress binaries
      run: |
        if [ -d "artifacts" ]; then
          echo "Artifacts directory structure:"
          ls -R artifacts
          
          cd artifacts
          for dir in *; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              # 进入子目录
              pushd "$dir" > /dev/null
              # 压缩子目录内的文件
              for file in *; do
                echo "Compressing: $file"
                zip "../${dir}.zip" "$file"
              done
              popd > /dev/null
              # 删除空目录
              rm -rf "$dir"
            else
              echo "Warning: $dir is not a directory, skipping"
            fi
          done
          cd ..
        else
          echo "Warning: artifacts directory not found. Skipping compression."
        fi
        
        echo "Generated ZIP files:"
        ls -lh artifacts/*.zip || true
      shell: bash
      continue-on-error: true

    - name: Get Release Info
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.ref_name }}'
            });
            
            // 设置输出变量
            core.setOutput('release_id', release.data.id);
            core.setOutput('upload_url', release.data.upload_url.replace(/\{.*$/, ''));
            
            console.log(`Release ID: ${release.data.id}`);
            console.log(`Upload URL: ${release.data.upload_url.replace(/\{.*$/, '')}`);
          } catch (error) {
            core.setFailed(`Failed to get release: ${error.message}`);
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Assets
      run: |
        # 检查上传URL是否有效
        if [ -z "${{ steps.get_release.outputs.upload_url }}" ]; then
          echo "Error: Upload URL is empty!"
          exit 1
        fi

        for file in artifacts/*.zip; do
          [ -e "$file" ] || continue
          filename=$(basename "$file")
          echo "Uploading $filename to release ${{ steps.get_release.outputs.release_id }}"
          
          # 显示完整URL用于调试
          full_url="${{ steps.get_release.outputs.upload_url }}?name=$filename"
          echo "Full URL: $full_url"
          
          # 上传文件
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"$file" \
            "$full_url"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
