name: Build and Release

# 触发条件：
#   - 手动触发：在GitHub仓库的Actions标签页中手动运行工作流
#   - 自动触发：当推送符合v*.*.*格式的标签时自动运行
#   示例标签：v1.0.0, v2.3.5, v3.0.0-rc.1
on:
  workflow_dispatch:  # 支持手动执行（无需参数）
  push:
    tags:             # 自动执行
      - 'v*.*.*'     # 匹配语义化版本标签（主.次.补丁）

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {arch: amd64, suffix: amd64}
          - {arch: arm64, suffix: arm64}
          - {arch: ppc64le, suffix: ppc64le}
          - {arch: s390x, suffix: s390x}
          - {arch: 386, suffix: 386}
          - {arch: arm, suffix: armv6, goarm: 6}
          - {arch: arm, suffix: armv7, goarm: 7}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-linux-${{ matrix.suffix }}"
        if [ -n "${{ matrix.goarm }}" ]; then
          export GOARM=${{ matrix.goarm }}
        fi
        GOOS=linux GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT linux-${{ matrix.suffix }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.suffix }}
        path: linux-${{ matrix.suffix }}
        if-no-files-found: warn

  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, amd64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        OUTPUT="moeCounter-macos-${{ matrix.arch }}"
        GOOS=darwin GOARCH=${{ matrix.arch }} go build -o $OUTPUT ./main.go
        mv $OUTPUT macos-${{ matrix.arch }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: macos-${{ matrix.arch }}
        if-no-files-found: warn

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64, 386]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: |
        $output = "windows-${{ matrix.arch }}.exe"
        go build -o $output ./main.go
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: windows-${{ matrix.arch }}.exe
        if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*'

    - name: Compress binaries
      run: |
        if [ -d "artifacts" ]; then
          echo "Artifacts directory structure:"
          ls -R artifacts
          
          cd artifacts
          # 处理所有文件和目录
          for item in *; do
            if [ -d "$item" ]; then
              echo "Processing directory: $item"
              pushd "$item" > /dev/null
              for file in *; do
                echo "Compressing: $file into ../${item}.zip"
                zip -j "../${item}.zip" "$file"
              done
              popd > /dev/null
              rm -rf "$item"
            elif [ -f "$item" ]; then
              echo "Processing file: $item"
              # 直接压缩文件
              filename=$(basename "$item")
              zip "${filename%.*}.zip" "$item"
              rm -f "$item"
            fi
          done
          cd ..
        else
          echo "Warning: artifacts directory not found. Skipping compression."
        fi
        
        echo "Generated ZIP files:"
        ls -lh artifacts/*.zip || true
      shell: bash
      continue-on-error: true

    - name: Get Release Info and Upload Assets
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const core = require('@actions/core');

          try {
            // 获取release
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.ref_name }}'
            });
            
            const releaseId = release.data.id;
            const uploadUrl = release.data.upload_url.replace(/\{.*$/, '');

            console.log(`Release ID: ${releaseId}`);
            console.log(`Upload URL: ${uploadUrl}`);

            // 上传artifacts目录下的所有zip文件
            const artifactsDir = path.join(process.env.GITHUB_WORKSPACE, 'artifacts');
            const files = fs.readdirSync(artifactsDir);
            const zipFiles = files.filter(file => file.endsWith('.zip'));

            for (const zipFile of zipFiles) {
              const filePath = path.join(artifactsDir, zipFile);
              const fileStats = fs.statSync(filePath);
              const fileSize = fileStats.size;
              const fileStream = fs.createReadStream(filePath);

              console.log(`Uploading ${zipFile} (${fileSize} bytes) to release ${releaseId}`);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: zipFile,
                data: fileStream,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': fileSize
                }
              });
            }

          } catch (error) {
            core.setFailed(`Failed to get release or upload assets: ${error.message}`);
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
